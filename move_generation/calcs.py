import json

def open_json(file_name):
    with open("resources/" + file_name) as f:
        data = json.load(f)
    return dict(zip(map(int, data), data.values()))

def bin64_to_str(bin64):
    return str(bin(bin64))[2:].zfill(64)

def str_to_bin64(s):
    total = 0
    for idx, val in enumerate(s):
        total += 2 ** idx if val == "1" else 0
    return total

def print_bb(bb):
    s = bin64_to_str(bb)
    for c, char in enumerate(s):
        print(char, end='')
        if (c + 1) % 8 == 0:
            print()

def get_rank(sq):
    return sq // 8

def get_file(sq):
    return sq % 8

BISHOP_SQRS = open_json("bishop_sqrs.json")
ROOK_SQRS = open_json("rook_sqrs.json")

BB_SQRS = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 
           131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 
           67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 
           8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 
           549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 
           17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 
           562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 
           18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 
           288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 
           4611686018427387904, 9223372036854775808]

BB_RANKS = [255, 65280, 16711680, 4278190080, 1095216660480, 280375465082880, 71776119061217280, 18374686479671623680]
BB_FILES = [72340172838076673, 144680345676153346, 289360691352306692, 578721382704613384, 1157442765409226768, 2314885530818453536, 4629771061636907072, 9259542123273814144]

BB_EDGES = BB_RANKS[0] | BB_RANKS[7] | BB_SQRS[8] | BB_SQRS[16] | BB_SQRS[24] | BB_SQRS[32] | BB_SQRS[40] | BB_SQRS[48] | BB_SQRS[15] | BB_SQRS[23] | BB_SQRS[31] | BB_SQRS[39] | BB_SQRS[47] | BB_SQRS[55]
BB_CORNERS = BB_SQRS[0] | BB_SQRS[7] | BB_SQRS[56] | BB_SQRS[63]

def disallowed(sq):
    bb = BB_EDGES
    if (rank := get_rank(sq)) in (0, 7):
        bb ^= BB_RANKS[rank]
        bb |= BB_CORNERS
    if (file := get_file(sq)) in (0, 7):
        bb ^= BB_FILES[file]
        bb |= BB_CORNERS
    return bb

# sqrs = list({k : (v["NW"] | v["NE"] | v["SW"] | v["SE"]) & ~BB_EDGES for k, v in BISHOP_SQRS.items()}.values())
# print(sqrs)

sqrs = list({k : (v["N"] | v["E"] | v["S"] | v["W"]) & ~disallowed(k) for k, v in ROOK_SQRS.items()}.values())
print(sqrs)

'''
BB_DIAG_MASKS from python-chess

[18049651735527936, 70506452091904, 275415828992, 1075975168, 38021120, 8657588224, 2216338399232, 567382630219776, 9024825867763712, 18049651735527424, 70506452221952, 275449643008, 9733406720, 2216342585344, 567382630203392, 1134765260406784, 4512412933816832, 9024825867633664, 18049651768822272, 70515108615168, 2491752130560, 567383701868544, 1134765256220672, 2269530512441344, 2256206450263040, 4512412900526080, 9024834391117824, 18051867805491712, 637888545440768, 1135039602493440, 2269529440784384, 4539058881568768, 1128098963916800, 2256197927833600, 4514594912477184, 9592139778506752, 19184279556981248, 2339762086609920, 4538784537380864, 9077569074761728, 562958610993152, 1125917221986304, 2814792987328512, 5629586008178688, 11259172008099840, 22518341868716544, 9007336962655232, 18014673925310464, 2216338399232, 4432676798464, 11064376819712, 22137335185408, 44272556441600, 87995357200384, 35253226045952, 70506452091904, 567382630219776, 1134765260406784, 2832480465846272, 5667157807464448, 11333774449049600, 22526811443298304, 9024825867763712, 18049651735527936]

'''

#pythonchess =  [18049651735527936, 70506452091904, 275415828992, 1075975168, 38021120, 8657588224, 2216338399232, 567382630219776, 9024825867763712, 18049651735527424, 70506452221952, 275449643008, 9733406720, 2216342585344, 567382630203392, 1134765260406784, 4512412933816832, 9024825867633664, 18049651768822272, 70515108615168, 2491752130560, 567383701868544, 1134765256220672, 2269530512441344, 2256206450263040, 4512412900526080, 9024834391117824, 18051867805491712, 637888545440768, 1135039602493440, 2269529440784384, 4539058881568768, 1128098963916800, 2256197927833600, 4514594912477184, 9592139778506752, 19184279556981248, 2339762086609920, 4538784537380864, 9077569074761728, 562958610993152, 1125917221986304, 2814792987328512, 5629586008178688, 11259172008099840, 22518341868716544, 9007336962655232, 18014673925310464, 2216338399232, 4432676798464, 11064376819712, 22137335185408, 44272556441600, 87995357200384, 35253226045952, 70506452091904, 567382630219776, 1134765260406784, 2832480465846272, 5667157807464448, 11333774449049600, 22526811443298304, 9024825867763712, 18049651735527936]
pythonchess = [282578800148862, 565157600297596, 1130315200595066, 2260630401190006, 4521260802379886, 9042521604759646, 18085043209519166, 36170086419038334, 282578800180736, 565157600328704, 1130315200625152, 2260630401218048, 4521260802403840, 9042521604775424, 18085043209518592, 36170086419037696, 282578808340736, 565157608292864, 1130315208328192, 2260630408398848, 4521260808540160, 9042521608822784, 18085043209388032, 36170086418907136, 282580897300736, 565159647117824, 1130317180306432, 2260632246683648, 4521262379438080, 9042522644946944, 18085043175964672, 36170086385483776, 283115671060736, 565681586307584, 1130822006735872, 2261102847592448, 4521664529305600, 9042787892731904, 18085034619584512, 36170077829103616, 420017753620736, 699298018886144, 1260057572672512, 2381576680245248, 4624614895390720, 9110691325681664, 18082844186263552, 36167887395782656, 35466950888980736, 34905104758997504, 34344362452452352, 33222877839362048, 30979908613181440, 26493970160820224, 17522093256097792, 35607136465616896, 9079539427579068672, 8935706818303361536, 8792156787827803136, 8505056726876686336, 7930856604974452736, 6782456361169985536, 4485655873561051136, 9115426935197958144]

print(sqrs == pythonchess)
# for i in range(64):
#     if sqrs[i] != pythonchess[i]:
#         print(i)
#         print_bb(sqrs[i])
#         print("\n")
#         print_bb(pythonchess[i])
#         print("\n")

# BB_DIAG_MASKS
ok = [18049651735527936, 70506452091904, 275415828992, 1075975168, 38021120, 8657588224, 2216338399232, 567382630219776, 9024825867763712, 18049651735527424, 70506452221952, 275449643008, 9733406720, 2216342585344, 567382630203392, 1134765260406784, 4512412933816832, 9024825867633664, 18049651768822272, 70515108615168, 2491752130560, 567383701868544, 1134765256220672, 2269530512441344, 2256206450263040, 4512412900526080, 9024834391117824, 18051867805491712, 637888545440768, 1135039602493440, 2269529440784384, 4539058881568768, 1128098963916800, 2256197927833600, 4514594912477184, 9592139778506752, 19184279556981248, 2339762086609920, 4538784537380864, 9077569074761728, 562958610993152, 1125917221986304, 2814792987328512, 5629586008178688, 11259172008099840, 22518341868716544, 9007336962655232, 18014673925310464, 2216338399232, 4432676798464, 11064376819712, 22137335185408, 44272556441600, 87995357200384, 35253226045952, 70506452091904, 567382630219776, 1134765260406784, 2832480465846272, 5667157807464448, 11333774449049600, 22526811443298304, 9024825867763712, 18049651735527936]

# print_bb(ok[27])

# files = ["a", "b", "c", "d", "e", "f", "g", "h"]
# def get_sq(f, r):
#     return files.index(f) + (int(r) - 1) * 8

# def sq_num(name):
#     f, r = name
#     return get_sq(f, r)

# print(sq_num("d4"))