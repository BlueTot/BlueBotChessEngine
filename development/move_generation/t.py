BB_SQRS = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 
           131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 
           67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 
           8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 
           549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 
           17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 
           562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 
           18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 
           288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 
           4611686018427387904, 9223372036854775808]

def bin64_to_str(bin64):
    return str(bin(bin64))[2:].zfill(64)

def str_to_bin64(s):
    total = 0
    for idx, val in enumerate(s):
        total += 2 ** idx if val == "1" else 0
    return total

def print_bb(bb):
    s = bin64_to_str(bb)
    for c, char in enumerate(s):
        print(char, end='')
        if (c + 1) % 8 == 0:
            print()

# BB_RANKS = [sum([BB_SQRS[j] for j in range(i, i + 8)]) for i in range(0, 64, 8)]
# print(BB_RANKS)

# for i in range(8):
#     print("\n")
#     print_bb(BB_RANKS[i])


BB_FILES = [sum([BB_SQRS[j] for j in range(i, 64, 8)]) for i in range(0, 8)]
print(BB_FILES)

for i in range(8):
    print("\n")
    print_bb(BB_FILES[i])